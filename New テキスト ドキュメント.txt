✅ Step-by-Step Implementation Plan
1. Create AppUser Entity (common for Organizer/Participant)
java
Copy
Edit
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@Getter @Setter
public abstract class AppUser extends BaseEntity {
    @NotBlank
    protected String email;

    @NotBlank
    protected String password;

    @Enumerated(EnumType.STRING)
    protected Role role;
}
2. Enum Role
java
Copy
Edit
public enum Role {
    ORGANIZER,
    PARTICIPANT
}
3. Extend AppUser in Organizer and Participant
java
Copy
Edit
@Entity
@Getter @Setter
@NoArgsConstructor
public class Organizer extends AppUser {
    // Organizer-specific fields if needed
}

@Entity
@Getter @Setter
@NoArgsConstructor
public class Participant extends AppUser {
    private String participantId;
}
4. Create AppUserRepository
java
Copy
Edit
@Repository
public interface AppUserRepository extends JpaRepository<AppUser, Long> {
    Optional<AppUser> findByEmail(String email);
}
5. Create UserDetailsServiceImpl
java
Copy
Edit
@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {

    private final AppUserRepository appUserRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        AppUser user = appUserRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        return new org.springframework.security.core.userdetails.User(
                user.getEmail(),
                user.getPassword(),
                Collections.singleton(new SimpleGrantedAuthority("ROLE_" + user.getRole()))
        );
    }
}
6. Encode Role into JWT Token
✅ You already have this logic inside your JWTService – just add role info:

java
Copy
Edit
public String generateToken(AppUser user) {
    Map<String, Object> claims = new HashMap<>();
    claims.put("role", user.getRole().name());
    return generateToken(claims, user.getEmail());
}
7. Secure Your Thymeleaf Pages (Role-based)
✅ Configure Spring Security:

java
Copy
Edit
@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    http
        .csrf().disable()
        .authorizeHttpRequests()
        .requestMatchers("/participant_thymeleaf/list", "/participant_thymeleaf/**").hasRole("PARTICIPANT")
        .requestMatchers("/admin/**", "/event/**").hasRole("ORGANIZER")
        .anyRequest().authenticated()
        .and()
        .formLogin()
        .loginPage("/login") // Your custom login page
        .permitAll()
        .and()
        .logout().permitAll();

    return http.build();
}
8. Thymeleaf Login Page
Let users select their role (Organizer or Participant):

html
Copy
Edit
<form method="post" th:action="@{/login}">
    <input type="email" name="username" placeholder="Email" required />
    <input type="password" name="password" placeholder="Password" required />
    
    <select name="role">
        <option value="ORGANIZER">Organizer</option>
        <option value="PARTICIPANT">Participant</option>
    </select>
    
    <button type="submit">Login</button>
</form>
(Note: You can handle the role in backend for display but use only username and password for Spring Security default login)

✅ What’s Next?
✅ Add a custom login controller if needed.

✅ Modify your Thymeleaf templates to display only what is relevant per role.

✅ Protect /participant_thymeleaf/list.html with hasRole('PARTICIPANT')

✅ Protect /admin/**, /event/**, etc. with hasRole('ORGANIZER')

Let me know if you want me to generate the controller and login logic (custom or form-based), or integrate it fully into your JWTAuthenticationFilter.








